@model ASP_1.Models.Forum.ForumIndexModel
@{
    ViewData["Title"] = "Forum";
}

<h1 class="display-4">Форум</h1>

<div class="row">
    <div class="col col-8">
@foreach(var Section in Model.Sections)
{
    @Html.DisplayFor(m=>Section, "ForumSection")
}
    </div>
</div>
@if (Model.UserCanCreate)
{
    <div class="row">
        <div class="col col-6">
            <h5>Создать новый раздел</h5>
            @if(Model.CreateMessage is not null)
            {
                <h6>
                    <strong style='color: @(Model.isMessagePositive==true?"green":"red")'>@Model.CreateMessage</strong>
                    </h6>
            }
            <form method="post" asp-action="CreateSection">
                <div class="form-group">
                    <label for="section-title">Название</label>
                    <input type="text" id="section-title" 
                    name="section-title" 
                    class="form-control" 
                    value="@(Model.formModel is null?"":Model.formModel.Title)"
                    placeholder="Название раздела" />
                </div>
                <div class="form-group">
                  <label for="section-description" class="form-label">Описание</label>
                    <textarea class="form-control" id="section-description"
                              name="section-description"
                              placeholder="Введите описание раздела"
                              rows="3">@(Model.formModel is null ? "" : Model.formModel.Description)</textarea>
                </div>
                <button class="btn btn-light mt-3" type=submit>Создать</button>
             </form>
        </div>
    </div>
}

<script>
    document.addEventListener("DOMContentLoaded", () => {
        for(let elem of document.querySelectorAll("[data-rating]") ) {
            elem.addEventListener('click', ratingClick);
        }
    })
    function ratingClick(e) {
        const sidElement = document.querySelector("[data-user-sid]");
        if (!sidElement) {
            alert("Для оценки необходимо авторизироваться");
            return;
        }

        const span = e.target.closest("span");
        const isGiven = span.getAttribute("data-rating-given");
        const data = {
            "itemId": span.getAttribute("data-rating"),
            "data": span.getAttribute("data-rating-value"),
            "userId": sidElement.getAttribute("data-user-sid")
        }
        const method = isGiven == "true" ? "DELETE" : "POST";
        window.fetch("/api/rates", {
            method: method,
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
        .then(r => r.json())
        .then(j => {
            console.log(j)
        });
    }
</script>